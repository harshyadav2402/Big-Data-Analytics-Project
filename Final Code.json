{"paragraphs":[{"text":"%pyspark\n#Creating PySpark Context for usage in the project.\nspark","dateUpdated":"2017-12-13T21:58:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<pyspark.sql.session.SparkSession object at 0x7f372f012410>\n"}]},"apps":[],"jobName":"paragraph_1513202291929_2098379300","id":"20171206-162825_1068589456","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4566"},{"text":"%pyspark\n#https://data.cityofnewyork.us/Public-Safety/Fire-Incident-Dispatch-Data/8m42-w767\n#Loading Fire_Incident_Dispatch_Data data from csv file to dataframe named df.\ndf = spark.read.csv(\"/shared/d/Fire_Incident_Dispatch_Data.csv\", header='true')\n\n#The data constitutes of 1,865,618 rows, which can be seen by uncommenting the below command.\n#df.count() #1,865,618\n\n#Remove rows containing nan value in any of the column from the dataset, so that it does not affect our further analysis.\ndf = df.dropna(how = 'any')\n\n#After removing all rows containing nan values in any of the columns we are left with 1,523,310 rows, pn which we will perform our analysis.\n#df.count() #1,523,310\n\n#Creating a view named df_table to be used in sql query below which will contain data of year 2016 only.\ndf.createOrReplaceTempView(\"df_table\")\nsqlDF = spark.sql(\"SELECT  * FROM df_table WHERE INCIDENT_DATETIME like '%2016%'\").show()\n\n#The number of rows that have 2016 data are 228,850.\n#sqlDF.count() #228,850\n\n#Write the sql output to Fire_Incident_Dispatch_Data_2016.csv file\n#sqlDF.coalesce(1).write.option(\"header\", \"true\").csv(\"/shared/d/project/Fire_Incident_Dispatch_Data_2016.csv\")","dateUpdated":"2017-12-13T22:00:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","datan|STARFIRE_INCIDENT_ID|   INCIDENT_DATETIME|   ALARM_BOX_BOROUGH|ALARM_BOX_NUMBER|  ALARM_BOX_LOCATION|    INCIDENT_BOROUGH|ZIPCODE|POLICEPRECINCT|CITYCOUNCILDISTRICT|COMMUNITYDISTRICT|COMMUNITYSCHOOLDISTRICT|CONGRESSIONALDISTRICT|ALARM_SOURCE_DESCRIPTION_TX|ALARM_LEVEL_INDEX_DESCRIPTION|HIGHEST_ALARM_LEVEL|INCIDENT_CLASSIFICATION|INCIDENT_CLASSIFICATION_GROUP|DISPATCH_RESPONSE_SECONDS_QY|FIRST_ASSIGNMENT_DATETIME|FIRST_ACTIVATION_DATETIME|FIRST_ON_SCENE_DATETIME|INCIDENT_CLOSE_DATETIME|VALID_DISPATCH_RSPNS_TIME_INDC|VALID_INCIDENT_RSPNS_TIME_INDC|INCIDENT_RESPONSE_SECONDS_QY|INCIDENT_TRAVEL_TM_SECONDS_QY|ENGINES_ASSIGNED_QUANTITY|LADDERS_ASSIGNED_QUANTITY|OTHER_UNITS_ASSIGNED_QUANTITY|\nn|    1600123850140001|01/01/2016 12:00:...|            BROOKLYN|            2385|  AVENUE K & E 82 ST|            BROOKLYN|  11236|            69|                 46|              318|                     18|                    8|         Private Fire Alarm|                Initial Alarm|        First Alarm|   Carbon Monoxide -...|         NonMedical Emerge...|                          67|     01/01/2016 12:01:...|     01/01/2016 12:02:...|   01/01/2016 12:07:...|   01/01/2016 12:10:...|                             N|                             Y|                         393|                          326|                        1|                        1|                            0|\n|    1600125490620001|01/01/2016 12:01:...|               BRONX|            2549|WESTCHESTER AVE &...|               BRONX|  10459|            41|                 17|              202|                      8|                   15|                    UCT/911|                Initial Alarm|        First Alarm|   Demolition Debris...|          NonStructural Fires|                          12|     01/01/2016 12:01:...|     01/01/2016 12:02:...|   01/01/2016 12:09:...|   01/01/2016 12:18:...|                             N|                             Y|                         460|                          448|                        1|                        0|                            0|\n|    1600132410120004|01/01/2016 12:02:...|               BRONX|            3241|SACKETT & RADCLIF...|               BRONX|  10462|            49|                 13|              211|                     11|                   14|                    UCT/911|                Initial Alarm|        First Alarm|   Alarm System - Un...|         NonMedical Emerge...|                          11|     01/01/2016 12:02:...|     01/01/2016 12:03:...|   01/01/2016 12:06:...|   01/01/2016 12:15:...|                             N|                             Y|                         260|                          249|                        3|                        2|                            1|\n|    1600110370150003|01/01/2016 12:02:...|              QUEENS|            1037|SEAGIRT AVE & BEA...|              QUEENS|  11691|           101|                 31|              414|                     27|                    5|            PD Link/Medical|                Initial Alarm|        First Alarm|   Medical - Assist ...|          Medical Emergencies|                           5|     01/01/2016 12:02:...|     01/01/2016 12:03:...|   01/01/2016 12:09:...|   01/01/2016 12:19:...|                             N|                             Y|                         386|                          381|                        1|                        0|                            0|\n|    1600101710110017|01/01/2016 12:03:...|           MANHATTAN|             171|CHURCH ST & WALKE...|           MANHATTAN|  10013|             1|                  1|              101|                      2|                   10|         Private Fire Alarm|                Initial Alarm|        First Alarm|   Alarm System - De...|         NonMedical Emerge...|                          60|     01/01/2016 12:04:...|     01/01/2016 12:04:...|   01/01/2016 12:08:...|   01/01/2016 12:18:...|                             N|                             Y|                         344|                          284|                        1|                        1|                            1|\n|    1600123740120006|01/01/2016 12:03:...|               BRONX|            2374|     KELLY & 163 STS|               BRONX|  10459|            41|                 17|              202|                      8|                   15|         Private Fire Alarm|                Initial Alarm|        First Alarm|   Odor - Other Than...|         NonMedical Emerge...|                          62|     01/01/2016 12:04:...|     01/01/2016 12:04:...|   01/01/2016 12:08:...|   01/01/2016 12:25:...|                             N|                             Y|                         323|                          261|                        1|                        1|                            1|\n|    1600153880150004|01/01/2016 12:03:...|              QUEENS|            5388|ILION AVE & MAYVI...|              QUEENS|  11412|           113|                 27|              412|                     29|                    5|            PD Link/Medical|                Initial Alarm|        First Alarm|   Medical - PD Link...|          Medical Emergencies|                          10|     01/01/2016 12:03:...|     01/01/2016 12:03:...|   01/01/2016 12:07:...|   01/01/2016 12:08:...|                             N|                             Y|                         254|                          244|                        1|                        0|                            0|\n|    1600131820120007|01/01/2016 12:03:...|               BRONX|            3182|CRESTON AVE & 182 ST|               BRONX|  10453|            46|                 14|              205|                     10|                   15|                    UCT/911|                Initial Alarm|        First Alarm|   Defective Oil Burner|         NonMedical Emerge...|                          27|     01/01/2016 12:04:...|     01/01/2016 12:04:...|   01/01/2016 12:07:...|   01/01/2016 12:23:...|                             N|                             Y|                         234|                          207|                        4|                        2|                            1|\n|    1600112350150005|01/01/2016 12:05:...|              QUEENS|            1235|BEACH CHANNEL DR ...|              QUEENS|  11692|           101|                 31|              414|                     27|                    5|                      Phone|                Initial Alarm|        First Alarm|   Assist Civilian -...|         NonMedical Emerge...|                          45|     01/01/2016 12:05:...|     01/01/2016 12:06:...|   01/01/2016 12:09:...|   01/01/2016 12:20:...|                             N|                             Y|                         278|                          233|                        0|                        1|                            0|\n|    1600108930110018|01/01/2016 12:05:...|           MANHATTAN|             893|       1 AVE & 54 ST|           MANHATTAN|  10022|            17|                  5|              106|                      2|                   12|                    UCT/911|                Initial Alarm|        First Alarm|     Odor - Other Smoke|         NonMedical Emerge...|                           8|     01/01/2016 12:05:...|     01/01/2016 12:06:...|   01/01/2016 12:09:...|   01/01/2016 12:33:...|                             N|                             Y|                         232|                          224|                        3|                        2|                            1|\n|    1600103620110019|01/01/2016 12:05:...|           MANHATTAN|             362|MERCER & BLEECKER...|           MANHATTAN|  10012|             6|                  1|              102|                      2|                   12|            PD Link/Medical|                Initial Alarm|        First Alarm|   Medical - Assist ...|          Medical Emergencies|                           8|     01/01/2016 12:05:...|     01/01/2016 12:06:...|   01/01/2016 12:09:...|   01/01/2016 12:21:...|                             N|                             Y|                         203|                          195|                        1|                        0|                            0|\n|    1600113740140003|01/01/2016 12:05:...|            BROOKLYN|            1374|RICHARDS ST & VER...|            BROOKLYN|  11231|            76|                 38|              306|                     15|                    7|         Private Fire Alarm|                Initial Alarm|        First Alarm|   Sprinkler System ...|         NonMedical Emerge...|                          68|     01/01/2016 12:07:...|     01/01/2016 12:07:...|   01/01/2016 12:09:...|   01/01/2016 12:23:...|                             N|                             Y|                         217|                          149|                        1|                        1|                            1|\n|    1600135080120015|01/01/2016 12:06:...|               BRONX|            3508|BAINBRIDGE AVE & ...|               BRONX|  10458|            52|                 15|              207|                     10|                   13|         Private Fire Alarm|                Initial Alarm|        First Alarm|   Alarm System - De...|         NonMedical Emerge...|                          46|     01/01/2016 12:07:...|     01/01/2016 12:07:...|   01/01/2016 12:10:...|   01/01/2016 12:18:...|                             N|                             Y|                         227|                          181|                        1|                        1|                            1|\n|    1600113940110022|01/01/2016 12:06:...|           MANHATTAN|            1394|MORNINGSIDE AVE &...|           MANHATTAN|  10026|            28|                  9|              110|                      3|                   13|                    UCT/911|                Initial Alarm|        First Alarm|   Assist Civilian -...|         NonMedical Emerge...|                           5|     01/01/2016 12:06:...|     01/01/2016 12:07:...|   01/01/2016 12:11:...|   01/01/2016 12:19:...|                             N|                             Y|                         262|                          257|                        0|                        1|                            0|\n|    1600107180210027|01/01/2016 12:08:...|           MANHATTAN|             718|     1 AVE & E 34 ST|           MANHATTAN|  10016|            17|                  2|              106|                      2|                   12|           EMS Link/Medical|                Initial Alarm|        First Alarm|   Medical - Assist ...|          Medical Emergencies|                           5|     01/01/2016 12:08:...|     01/01/2016 12:08:...|   01/01/2016 12:11:...|   01/01/2016 12:19:...|                             N|                             Y|                         170|                          165|                        1|                        0|                            0|\n|    1600174020150008|01/01/2016 12:08:...|              QUEENS|            7402|      32 AVE & 51 ST|              QUEENS|  11377|           114|                 26|              401|                     30|                   14|                    UCT/911|                Initial Alarm|        First Alarm|   Assist Civilian -...|         NonMedical Emerge...|                           9|     01/01/2016 12:08:...|     01/01/2016 12:08:...|   01/01/2016 12:14:...|   01/01/2016 12:24:...|                             N|                             Y|                         380|                          371|                        1|                        1|                            0|\n|    1600191250150009|01/01/2016 12:08:...|              QUEENS|            9125|    MAIN ST & 79 AVE|              QUEENS|  11367|           107|                 24|              408|                     25|                    6|                    UCT/911|                Initial Alarm|        First Alarm|   Multiple Dwelling...|             Structural Fires|                          10|     01/01/2016 12:08:...|     01/01/2016 12:09:...|   01/01/2016 12:11:...|   01/01/2016 12:29:...|                             N|                             Y|                         175|                          165|                        3|                        2|                            1|\n|    1600132180140008|01/01/2016 12:10:...|            BROOKLYN|            3218|   AVE X & STUART ST|            BROOKLYN|  11229|            61|                 46|              315|                     22|                    9|            PD Link/Medical|                Initial Alarm|        First Alarm|   Medical - Assist ...|          Medical Emergencies|                           4|     01/01/2016 12:10:...|     01/01/2016 12:11:...|   01/01/2016 12:14:...|   01/01/2016 12:27:...|                             N|                             Y|                         246|                          242|                        1|                        0|                            0|\n|    1600114750130001|01/01/2016 12:13:...|RICHMOND / STATEN...|            1475|ALTER AVE AND HEN...|RICHMOND / STATEN...|  10305|           122|                 50|              502|                     31|                   11|                    UCT/911|                Initial Alarm|        First Alarm|   Private Dwelling ...|             Structural Fires|                           9|     01/01/2016 12:13:...|     01/01/2016 12:14:...|   01/01/2016 12:17:...|   01/01/2016 12:37:...|                             N|                             Y|                         209|                          200|                        3|                        2|                            2|\n|    1600116190140012|01/01/2016 12:18:...|            BROOKLYN|            1619| RALPH AVE & DEAN ST|            BROOKLYN|  11233|            73|                 41|              316|                     16|                    8|           EMS Link/Medical|                Initial Alarm|        First Alarm|   Medical - Assist ...|          Medical Emergencies|                           4|     01/01/2016 12:18:...|     01/01/2016 12:18:...|   01/01/2016 12:20:...|   01/01/2016 12:33:...|                             N|                             Y|                         139|                          135|                        1|                        0|                            0|\nnonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1513202291930_2099533547","id":"20171206-162832_37414795","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4567"},{"text":"%pyspark\n\n#Loading Fire_Incident_Dispatch_Data_2016 data from csv file to dataframe named df. This file was created in the above code.\ndf = spark.read.csv(\"/shared/d/Fire_Incident_Dispatch_Data_2016.csv\", header='true')\n\n#This dataset has 228,850 rows on which we will perform our further analysis.\n#df.count() #228,850\n\n#Creating a view to be used in sql query\ndf.createOrReplaceTempView(\"df_table\")\n\n#Extracting average response seconds grouped by zipcode and output is ordered by average response seconds\nsqlDF_avg_rt = spark.sql(\"SELECT  ZIPCODE, AVG(INCIDENT_RESPONSE_SECONDS_QY) as avg_response_time  FROM df_table GROUP BY ZIPCODE ORDER BY avg_response_time DESC\")\n\n#Displaying the above created dataframe\nsqlDF_avg_rt.show()\n\n#Write the sql output to Avg_RT_wrt_Zipcodes_2016.csv file\n#sqlDF_avg_rt.coalesce(1).write.option(\"header\", \"true\").csv(\"/shared/d/project/Avg_RT_wrt_Zipcodes_2016.csv\")","dateUpdated":"2017-12-13T21:58:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+------------------+\n|ZIPCODE| avg_response_time|\n+-------+------------------+\n|  10803|             666.9|\n|  10153| 587.3333333333334|\n|  10123|             479.5|\n|  10103|458.88461538461536|\n|  11697|          441.1375|\n|  10154| 437.6666666666667|\n|  10044| 427.4251968503937|\n|  10129|             418.0|\n|  11430|412.31868131868134|\n|  11360|403.15269461077844|\n|  10022|398.41963015647224|\n|  10119|           393.875|\n|  11005|  390.463768115942|\n|  11359| 387.6666666666667|\n|  11363| 386.3170731707317|\n|  11427|      382.80078125|\n|  10017| 381.4967197750703|\n|  11001| 381.4259259259259|\n|  11040| 380.3731343283582|\n|  10461| 377.8474687705457|\n+-------+------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1513202291933_2096840304","id":"20171206-162855_1604230879","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4568"},{"text":"%pyspark\ndf = spark.read.csv(\"/shared/d/Fire_Incident_Dispatch_Data_2016.csv\", header='true')\n#df.count() #228,850\n\n#Creating a view to be used in sql query\ndf.createOrReplaceTempView(\"df_table\")\n\n#Extracting number of incidents grouped by zipcode and output is ordered by number of incidents\nsqlDF_no_of_incidents = spark.sql(\"SELECT  ZIPCODE,  COUNT(*) as no_of_incidents FROM df_table GROUP BY ZIPCODE ORDER BY no_of_incidents DESC\")\n\n#Displaying the above created dataframe.\nsqlDF_no_of_incidents.show()\n\n#Write the sql output to no_of_incidents_wrt_zipcodes_2016.csv file\n#sqlDF_no_of_incidents.coalesce(1).write.option(\"header\", \"true\").csv(\"/shared/d/project/no_of_incidents_wrt_zipcodes_2016.csv\")","dateUpdated":"2017-12-13T21:58:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------+---------------+\n|ZIPCODE|no_of_incidents|\n+-------+---------------+\n|  10456|           3983|\n|  10029|           3749|\n|  11207|           3477|\n|  11212|           3467|\n|  11206|           3213|\n|  10002|           3141|\n|  10027|           2845|\n|  10453|           2827|\n|  10467|           2788|\n|  10457|           2749|\n|  11201|           2710|\n|  11208|           2707|\n|  11226|           2705|\n|  11221|           2605|\n|  10451|           2591|\n|  11233|           2566|\n|  10458|           2498|\n|  10003|           2350|\n|  10019|           2344|\n|  10035|           2338|\n+-------+---------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1513202291935_2097609802","id":"20171206-163127_1019220793","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4569"},{"text":"%pyspark\ndf = spark.read.csv(\"/shared/d/Fire_Incident_Dispatch_Data_2016.csv\", header='true')\n\n#Creating a view to be used in sql query\ndf.createOrReplaceTempView(\"df_table\")\n\n#Extracting info of incidents of a particular Zipcode\n#You can change the zipcode in the query below\nsqlDF = spark.sql(\"SELECT * FROM df_table  WHERE ZIPCODE = 10003 \")\n\n#Write the sql query output to an appropriate file\n#sqlDF.coalesce(1).write.option(\"header\", \"true\").csv(\"/shared/d/project/10003_Fire_Incident_Dispatch_Data_2016.csv\")\n\n","dateUpdated":"2017-12-13T21:58:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1513202291937_2082989344","id":"20171206-171121_769393297","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4570"},{"text":"%pyspark\n##implementing KMeans on coordinates of a particular zipcode\n\nfrom pyspark.ml.clustering import KMeans\n\n# loads data into dataframe named df.\ndf = spark.read.format(\"libsvm\").load(\"/shared/d/1003_coordinates_libsvmformat.txt\")\n\n\n# trains a k-means model, set setK to select number of clusters\nkmeans = KMeans().setK(2).setSeed(1)\nmodel = kmeans.fit(df)\n\n\n# evaluate clustering by computing Within Set Sum of Squared Errors\nwssse = model.computeCost(df)\nprint(\"Within Set Sum of Squared Errors = \" + str(wssse))\n\n# show the result.\ncenters = model.clusterCenters()\n\nprint(\"Cluster Centers: \")\nfor center in centers:\n    print(center)","dateUpdated":"2017-12-13T21:58:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Within Set Sum of Squared Errors = 0.0094517627074\nCluster Centers: \n[ 40.73275403 -73.98648355]\n[ 40.73149193 -73.99254326]\n"}]},"apps":[],"jobName":"paragraph_1513202291939_2083758842","id":"20171206-170402_1785980562","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4571"},{"text":"%pyspark\n\n#Loading Fire_Incident_Dispatch_Data data from csv file to dataframe named dfh1.\ndfh1=spark.read.csv(\"/shared/d/Fire_Incident_Dispatch_Data.csv\", header = True)\n\n#Remove rows containing nan value in any of the column from the dataset, so that it does not affect our further analysis.\ndfh = dfh1.dropna(how = 'any')\n\n#After removing all rows having nan values in any of the columns we are left with 1,523,310 rows to perform analysis on.\ndfh.count()","dateUpdated":"2017-12-13T21:58:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"1523310\n"}]},"apps":[],"jobName":"paragraph_1513202291939_2083758842","id":"20171206-202723_1021805027","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4572"},{"text":"%pyspark\nfrom pyspark.sql.functions import *\n\n#Creating a view named table1 to be used in sql query\ndfh.createOrReplaceTempView(\"table1\")\ndf1=spark.sql(\"select STARFIRE_INCIDENT_ID, INCIDENT_DATETIME, ZIPCODE, INCIDENT_RESPONSE_SECONDS_QY from table1\")\n\n#Extracting Response time by zipcode and date time\ndf1.show()","dateUpdated":"2017-12-13T21:58:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+--------------------+-------+----------------------------+\n|STARFIRE_INCIDENT_ID|   INCIDENT_DATETIME|ZIPCODE|INCIDENT_RESPONSE_SECONDS_QY|\n+--------------------+--------------------+-------+----------------------------+\n|    1300121470120002|01/01/2013 12:00:...|  10454|                         843|\n|    1300108180110001|01/01/2013 12:00:...|  10036|                         506|\n|    1300196560150001|01/01/2013 12:01:...|  11418|                         218|\n|    1300140190150003|01/01/2013 12:01:...|  11385|                         278|\n|    1300174120150002|01/01/2013 12:02:...|  11103|                         316|\n|    1300113280140001|01/01/2013 12:02:...|  11232|                         310|\n|    1300106880110003|01/01/2013 12:03:...|  10001|                         555|\n|    1300196040150004|01/01/2013 12:04:...|  11418|                         136|\n|    1300128970120006|01/01/2013 12:04:...|  10472|                         385|\n|    1300122750120008|01/01/2013 12:04:...|  10451|                         527|\n|    1300126020140002|01/01/2013 12:05:...|  11220|                         190|\n|    1300106960110007|01/01/2013 12:05:...|  10001|                         213|\n|    1300127710120009|01/01/2013 12:05:...|  10452|                         386|\n|    1300133780120012|01/01/2013 12:08:...|  10458|                         333|\n|    1300141090150009|01/01/2013 12:09:...|  11385|                         210|\n|    1300101240110011|01/01/2013 12:10:...|  10038|                         229|\n|    1300132190120018|01/01/2013 12:10:...|  10462|                         192|\n|    1300127740120024|01/01/2013 12:11:...|  10452|                         346|\n|    1300113540140007|01/01/2013 12:11:...|  11231|                         179|\n|    1300126020340008|01/01/2013 12:11:...|  11220|                         259|\n+--------------------+--------------------+-------+----------------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1513202291940_2081835097","id":"20171206-214312_1510390953","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4573"},{"text":"%pyspark\nfrom pyspark.sql.types import DateType\n\n#extracting month and hour data from the INCIDENT_DATETIME column to perform further analysis based on month and season.\ndfff1=df1.withColumn('month', concat(df1.INCIDENT_DATETIME.substr(0,2)))\ndfff2=dfff1.withColumn('hour', concat(df1.INCIDENT_DATETIME.substr(12,2)))\n\n#Displaying the dataframe values\ndfff2.show()","dateUpdated":"2017-12-13T21:58:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+--------------------+-------+----------------------------+-----+----+\n|STARFIRE_INCIDENT_ID|   INCIDENT_DATETIME|ZIPCODE|INCIDENT_RESPONSE_SECONDS_QY|month|hour|\n+--------------------+--------------------+-------+----------------------------+-----+----+\n|    1300121470120002|01/01/2013 12:00:...|  10454|                         843|   01|  12|\n|    1300108180110001|01/01/2013 12:00:...|  10036|                         506|   01|  12|\n|    1300196560150001|01/01/2013 12:01:...|  11418|                         218|   01|  12|\n|    1300140190150003|01/01/2013 12:01:...|  11385|                         278|   01|  12|\n|    1300174120150002|01/01/2013 12:02:...|  11103|                         316|   01|  12|\n|    1300113280140001|01/01/2013 12:02:...|  11232|                         310|   01|  12|\n|    1300106880110003|01/01/2013 12:03:...|  10001|                         555|   01|  12|\n|    1300196040150004|01/01/2013 12:04:...|  11418|                         136|   01|  12|\n|    1300128970120006|01/01/2013 12:04:...|  10472|                         385|   01|  12|\n|    1300122750120008|01/01/2013 12:04:...|  10451|                         527|   01|  12|\n|    1300126020140002|01/01/2013 12:05:...|  11220|                         190|   01|  12|\n|    1300106960110007|01/01/2013 12:05:...|  10001|                         213|   01|  12|\n|    1300127710120009|01/01/2013 12:05:...|  10452|                         386|   01|  12|\n|    1300133780120012|01/01/2013 12:08:...|  10458|                         333|   01|  12|\n|    1300141090150009|01/01/2013 12:09:...|  11385|                         210|   01|  12|\n|    1300101240110011|01/01/2013 12:10:...|  10038|                         229|   01|  12|\n|    1300132190120018|01/01/2013 12:10:...|  10462|                         192|   01|  12|\n|    1300127740120024|01/01/2013 12:11:...|  10452|                         346|   01|  12|\n|    1300113540140007|01/01/2013 12:11:...|  11231|                         179|   01|  12|\n|    1300126020340008|01/01/2013 12:11:...|  11220|                         259|   01|  12|\n+--------------------+--------------------+-------+----------------------------+-----+----+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1513202291945_2079911353","id":"20171208-233901_1588094057","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4574"},{"text":"%pyspark\nfrom pyspark.sql.functions import *\nfrom pyspark.sql.types import *\n\n#Creating mapping for each season depending on the month value.\nmapping = {'01': \"Winter\", '02': \"Winter\", '03': \"Spring\", '04': \"Spring\", '05': \"Spring\", '06': \"Summer\", '07': \"Summer\", '08': \"Summer\", '09': \"Fall\", '10': \"Fall\", '11': \"Fall\", '12': \"Winter\"}\n\n#Creating a function that takes as input a string value for the column of a dataframe and returns the season name for the corresponding value.\ndef translate(mapping):\n    def translate_(col):\n        return mapping.get(col)\n    return udf(translate_, StringType())\n\n#Creating a new column named season, that stores the season based on the month value from the mapping create above.\ndff3=dfff2.withColumn(\"season\", translate(mapping)(\"Month\"))\n\n#Writing the csv file for the dff2 dataframe\n#dff3.coalesce(1).write.option(\"header\", \"true\").csv(\"Hour_Season.csv\")\n\n#Display the dataframe values.\ndff3.show()","dateUpdated":"2017-12-13T21:58:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+--------------------+-------+----------------------------+-----+----+------+\n|STARFIRE_INCIDENT_ID|   INCIDENT_DATETIME|ZIPCODE|INCIDENT_RESPONSE_SECONDS_QY|month|hour|season|\n+--------------------+--------------------+-------+----------------------------+-----+----+------+\n|    1300121470120002|01/01/2013 12:00:...|  10454|                         843|   01|  12|Winter|\n|    1300108180110001|01/01/2013 12:00:...|  10036|                         506|   01|  12|Winter|\n|    1300196560150001|01/01/2013 12:01:...|  11418|                         218|   01|  12|Winter|\n|    1300140190150003|01/01/2013 12:01:...|  11385|                         278|   01|  12|Winter|\n|    1300174120150002|01/01/2013 12:02:...|  11103|                         316|   01|  12|Winter|\n|    1300113280140001|01/01/2013 12:02:...|  11232|                         310|   01|  12|Winter|\n|    1300106880110003|01/01/2013 12:03:...|  10001|                         555|   01|  12|Winter|\n|    1300196040150004|01/01/2013 12:04:...|  11418|                         136|   01|  12|Winter|\n|    1300128970120006|01/01/2013 12:04:...|  10472|                         385|   01|  12|Winter|\n|    1300122750120008|01/01/2013 12:04:...|  10451|                         527|   01|  12|Winter|\n|    1300126020140002|01/01/2013 12:05:...|  11220|                         190|   01|  12|Winter|\n|    1300106960110007|01/01/2013 12:05:...|  10001|                         213|   01|  12|Winter|\n|    1300127710120009|01/01/2013 12:05:...|  10452|                         386|   01|  12|Winter|\n|    1300133780120012|01/01/2013 12:08:...|  10458|                         333|   01|  12|Winter|\n|    1300141090150009|01/01/2013 12:09:...|  11385|                         210|   01|  12|Winter|\n|    1300101240110011|01/01/2013 12:10:...|  10038|                         229|   01|  12|Winter|\n|    1300132190120018|01/01/2013 12:10:...|  10462|                         192|   01|  12|Winter|\n|    1300127740120024|01/01/2013 12:11:...|  10452|                         346|   01|  12|Winter|\n|    1300113540140007|01/01/2013 12:11:...|  11231|                         179|   01|  12|Winter|\n|    1300126020340008|01/01/2013 12:11:...|  11220|                         259|   01|  12|Winter|\n+--------------------+--------------------+-------+----------------------------+-----+----+------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1513202291946_2081065600","id":"20171206-221100_1707548732","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4575"},{"text":"%pyspark\n#creating view named data1 to be used in the below written sql query.\ndff3.createOrReplaceTempView(\"data1\")\n\n#Extracting average response time by each hour in a day on 12 hour clock.\ndff4=spark.sql(\"select Hour, AVG(INCIDENT_RESPONSE_SECONDS_QY) from data1 group by Hour\")\n\n#Writing the csv file for avg response time by zipcode and hour\n#dff4.coalesce(1).write.option(\"header\", \"true\").csv(\"Hour_Response_time.csv\")\n\n#Display the values of dff4 dataframe.\ndff4.show(50)","dateUpdated":"2017-12-13T21:58:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+-------------------------------------------------+\n|Hour|avg(CAST(INCIDENT_RESPONSE_SECONDS_QY AS DOUBLE))|\n+----+-------------------------------------------------+\n|  07|                                301.6861788128774|\n|  11|                                 291.898999992598|\n|  01|                               299.64668774966714|\n|  09|                               292.03934267091944|\n|  05|                               307.84428974791626|\n|  08|                                293.4377198564945|\n|  03|                               307.95551110436406|\n|  02|                                306.4621094020647|\n|  06|                               305.67912326000015|\n|  10|                                291.8771317747002|\n|  12|                                295.4422834988329|\n|  04|                                308.1313624220837|\n+----+-------------------------------------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1513202291947_2080680851","id":"20171206-221410_742775898","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4576"},{"text":"%pyspark\n#Extracting the number of incidents occured for each hour on a 12 hpur clock\ndff5=spark.sql(\"select hour, Count(*) as Number_of_Incidents from data1 group by hour\")\n\n#Writing the csv file for avg response time by zipcode and hour\n#dff5.coalesce(1).write.option(\"header\", \"true\").csv(\"Hour_Number_Incidents.csv\")\ndff5.show()","dateUpdated":"2017-12-13T21:58:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+----+-------------------+\n|hour|Number_of_Incidents|\n+----+-------------------+\n|  07|             132977|\n|  11|             135099|\n|  01|             120160|\n|  09|             144220|\n|  05|             117937|\n|  08|             142991|\n|  03|             111983|\n|  02|             115464|\n|  06|             122773|\n|  10|             141021|\n|  12|             126385|\n|  04|             112300|\n+----+-------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1513202291950_2079526604","id":"20171208-220451_411639271","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4577"},{"text":"%pyspark\n#Extracting the number of incidents occured by season. The mapping for the seasons has been created in the above code block.\ndff6=spark.sql(\"select season, Count(*) as Number_of_Incidents from data1 group by season\")\n\n#Writing the csv file for number of incidents by season\n#dff6.coalesce(1).write.option(\"header\", \"true\").csv(\"Season_Number_Incidents.csv\")\ndff6.show()","dateUpdated":"2017-12-13T21:58:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+-------------------+\n|season|Number_of_Incidents|\n+------+-------------------+\n|Spring|             429501|\n|Summer|             372006|\n|  Fall|             319759|\n|Winter|             402044|\n+------+-------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1513202291952_2089530075","id":"20171208-222937_1015644199","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4578"},{"text":"%pyspark\n#Extracting the average response time by each season.\ndff7=spark.sql(\"select season, AVG(INCIDENT_RESPONSE_SECONDS_QY) from data1 group by season\")\n\n#Writing the csv file for avg response time by season\n#dff7.coalesce(1).write.option(\"header\", \"true\").csv(\"Season_Response _time.csv\")\ndff7.show()","dateUpdated":"2017-12-13T21:58:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+-------------------------------------------------+\n|season|avg(CAST(INCIDENT_RESPONSE_SECONDS_QY AS DOUBLE))|\n+------+-------------------------------------------------+\n|Spring|                               296.45526785735075|\n|Summer|                                295.1248286317963|\n|  Fall|                                295.5431809581591|\n|Winter|                                310.4791863577121|\n+------+-------------------------------------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1513202291953_2089145326","id":"20171208-223118_903348410","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4579"},{"text":"%pyspark\n#Extracting the average response time by each month.\ndff8=spark.sql(\"select month, AVG(INCIDENT_RESPONSE_SECONDS_QY) from data1 group by month\")\n\n#Writing the csv file for avg response time by month\n#dff8.coalesce(1).write.option(\"header\", \"true\").csv(\"Month_Response _time.csv\")\ndff8.show()","dateUpdated":"2017-12-13T21:58:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+-------------------------------------------------+\n|month|avg(CAST(INCIDENT_RESPONSE_SECONDS_QY AS DOUBLE))|\n+-----+-------------------------------------------------+\n|   07|                                296.7914163829879|\n|   11|                               297.15950738256316|\n|   01|                               311.39468923256493|\n|   09|                                293.8092994420335|\n|   05|                               295.92329277784603|\n|   08|                                290.9134035937371|\n|   03|                                298.2699118436182|\n|   02|                                319.4963311849281|\n|   06|                               296.93335737812015|\n|   10|                                295.6598165037904|\n|   12|                               297.21654366601337|\n|   04|                                295.1475705890784|\n+-----+-------------------------------------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1513202291954_2090299573","id":"20171208-223313_1786766767","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4580"},{"text":"%pyspark\n#Extracting number of incidents occured by each month.\ndff9=spark.sql(\"select month, count(*) as Number_of_Incidents from data1 group by month\")\n\n#Writing the csv file for number of incidents by each month\n#dff9.coalesce(1).write.option(\"header\", \"true\").csv(\"Month_Zipcode_Incidents.csv\")\ndff9.show()","dateUpdated":"2017-12-13T21:58:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+-------------------+\n|month|Number_of_Incidents|\n+-----+-------------------+\n|   07|             116035|\n|   11|             104503|\n|   01|             154215|\n|   09|             104845|\n|   05|             146466|\n|   08|             109023|\n|   03|             143495|\n|   02|             141190|\n|   06|             146948|\n|   10|             110411|\n|   12|             106639|\n|   04|             139540|\n+-----+-------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1513202291956_2087991080","id":"20171208-223527_65018889","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4581"},{"text":"%pyspark\n\n#Reading 2016 Fire_Incident_Dispatch_Data into dataframe named df\ndf = spark.read.csv(\"/shared/d/Fire_Incident_Dispatch_Data_2016.csv\", header='true')\n#df.count() #228,850\n\n#Creating a view named df_table to be used in sql query\ndf.createOrReplaceTempView(\"df_table\")\n\n#Extracting number ofincidents grouped by INCIDENT_CLASSIFICATION and output is ordered by num_of_incidents seconds\nsqlDF_avg_rt = spark.sql(\"SELECT  INCIDENT_CLASSIFICATION, COUNT(*) as num_of_incidents  FROM df_table GROUP BY INCIDENT_CLASSIFICATION ORDER BY num_of_incidents DESC\")\nsqlDF_avg_rt.show()\n\n#Write the sql query output to an appropriate file\n#sqlDF_avg_rt.coalesce(1).write.option(\"header\", \"true\").csv(\"/shared/d/project/number_of_incidents_per_type_2016.csv\")","dateUpdated":"2017-12-13T21:58:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------------------+----------------+\n|INCIDENT_CLASSIFICATION|num_of_incidents|\n+-----------------------+----------------+\n|   Medical - Assist ...|           82878|\n|   Assist Civilian -...|           35513|\n|   Odor - Other Than...|           13295|\n|   Utility Emergency...|           10980|\n|   Alarm System - De...|            9140|\n|   Utility Emergency...|            9046|\n|   Vehicle Accident ...|            6150|\n|   Medical - EMS Lin...|            5721|\n|   Alarm System - Un...|            5255|\n|   Utility Emergency...|            4758|\n|   Medical - PD Link...|            4552|\n|   Multiple Dwelling...|            4391|\n|   Carbon Monoxide -...|            4055|\n|   Non-Medical MFA -...|            3754|\n|   Private Dwelling ...|            3263|\n|   Demolition Debris...|            2989|\n|     Odor - Other Smoke|            2186|\n|   Multiple Dwelling...|            2127|\n|   Alarm System - Te...|            1674|\n|   Other Commercial ...|            1473|\n+-----------------------+----------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1513202291961_2086067335","id":"20171208-223637_1318181370","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4582"},{"text":"%pyspark\n#Reading 2016 Fire_Incident_Dispatch_Data into dataframe named df.\ndf = spark.read.csv(\"/shared/d/Fire_Incident_Dispatch_Data_2016.csv\", header='true')\n\n#The dataframe has 228,850 number of rows.\n#df.count() #228,850\n\n#Creating a view to be used in sql query\ndf.createOrReplaceTempView(\"df_table\")\n\n#Extracting average response seconds grouped by INCIDENT_CLASSIFICATION and output is ordered by average response seconds\nsqlDF_avg_rt = spark.sql(\"SELECT  INCIDENT_CLASSIFICATION, AVG(INCIDENT_RESPONSE_SECONDS_QY) as avg_time_type  FROM df_table GROUP BY INCIDENT_CLASSIFICATION ORDER BY avg_time_type DESC\")\nsqlDF_avg_rt.show()\n\n#Write the sql query output to an appropriate file\n#sqlDF_avg_rt.coalesce(1).write.option(\"header\", \"true\").csv(\"/shared/d/project/average_responce_per_type_2016.csv\")","dateUpdated":"2017-12-13T21:58:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------------------+------------------+\n|INCIDENT_CLASSIFICATION|     avg_time_type|\n+-----------------------+------------------+\n|   Non-Medical MFA -...|             703.0|\n|   Utility Emergency...| 456.1647136856069|\n|   Utility Emergency...| 449.9255319148936|\n|   Non-Medical MFA -...|409.02222222222224|\n|    Undefined Emergency|       392.4296875|\n|   Non-Medical MFA -...|             373.6|\n|   Sprinkler System ...| 368.7829545454546|\n|   Assist Civilian -...|366.06211809759805|\n|   Sprinkler System ...| 364.2916666666667|\n|   Non-Medical 10-91...| 348.2298850574713|\n|   Medical - EMS Lin...|330.27180562838663|\n|   Alarm System - Un...| 329.3874405328259|\n|   Sprinkler System ...| 328.7755102040816|\n|   Sprinkler System ...|324.15102974828375|\n|   Alarm System - Te...| 322.8936678614098|\n|   Medical MFA - EMS...|       320.9671875|\n|   Alarm System - De...|320.38927789934354|\n|             Brush Fire| 318.3686274509804|\n|   Non-Medical MFA -...| 313.1531058617673|\n|   Other Transportat...|310.13793103448273|\n+-----------------------+------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1513202291963_2086836833","id":"20171211-063036_819965635","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4583"},{"text":"%pyspark\n#Reading 2016 Fire_Incident_Dispatch_Data into dataframe named df.\ndf = spark.read.csv(\"/shared/d/Fire_Incident_Dispatch_Data_2016.csv\", header='true')\n\n#The dataframe has 228,850 number of rows.\n#df.count() #228,850\n\n#Creating a view named df_table to be used in sql query\ndf.createOrReplaceTempView(\"df_table\")\n\n#Extracting frequency of incidents grouped by INCIDENT_RESPONSE_SECONDS_QY  and output is ordered by num_of_incidents_same_time \nsqlDF_avg_rt = spark.sql(\"SELECT CAST( INCIDENT_RESPONSE_SECONDS_QY AS int) as INCIDENT_RESPONSE_SECONDS , COUNT(*) as num_of_incidents_same_time  FROM df_table GROUP BY INCIDENT_RESPONSE_SECONDS_QY ORDER BY num_of_incidents_same_time DESC \")\nsqlDF_avg_rt.show()\n\n#Write the sql query output to an appropriate file\n#sqlDF_avg_rt.coalesce(1).write.option(\"header\", \"true\").csv(\"/shared/d/project/frequency_of_responce_time_2016.csv\")","dateUpdated":"2017-12-13T21:58:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-------------------------+--------------------------+\n|INCIDENT_RESPONSE_SECONDS|num_of_incidents_same_time|\n+-------------------------+--------------------------+\n|                      248|                      1108|\n|                      238|                      1102|\n|                      249|                      1086|\n|                      281|                      1077|\n|                      257|                      1066|\n|                      246|                      1059|\n|                      241|                      1056|\n|                      244|                      1054|\n|                      266|                      1052|\n|                      251|                      1051|\n|                      259|                      1049|\n|                      263|                      1048|\n|                      233|                      1047|\n|                      253|                      1044|\n|                      250|                      1038|\n|                      268|                      1037|\n|                      232|                      1036|\n|                      237|                      1036|\n|                      265|                      1036|\n|                      267|                      1035|\n+-------------------------+--------------------------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1513202291965_2084528340","id":"20171211-063112_449614803","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4584"},{"text":"%pyspark\n","dateUpdated":"2017-12-13T21:58:11+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1513202291969_-2125794198","id":"20171211-063142_1571212851","dateCreated":"2017-12-13T21:58:11+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:4585"}],"name":"Final Code","id":"2CZAQG4YT","angularObjects":{"2D3YKMA3Q:shared_process":[],"2D3G5JUQD:shared_process":[],"2D16NTPPP:shared_process":[],"2D1412ED8:shared_process":[],"2D1MZRGJK:shared_process":[],"2D2EP8PY8:shared_process":[],"2D3G5NZ7F:shared_process":[],"2D34TWP74:shared_process":[],"2CZURG6Y2:shared_process":[],"2CZ9EVNX1:shared_process":[],"2D15Q6JQ5:shared_process":[],"2D1J7GUUR:shared_process":[],"2D3XTN5SK:shared_process":[],"2D1AR1WA9:shared_process":[],"2D31C5PDE:shared_process":[],"2D3Y49XQ2:shared_process":[],"2D36CEKYR:shared_process":[],"2D2G19EE4:shared_process":[],"2D21XQWNN:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}